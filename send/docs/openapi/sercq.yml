openapi: 3.0.3
info:
  title: SER-CQ API
  description: API documentation for the SER-CQ service.
  version: 1.0.0
servers:
  - url: https://api.example.com
    description: Production server
  - url: https://staging-api.example.com
    description: Staging server
paths:
  /piattaforma-notifiche:
    post:
      summary: Invia una notifica digitale
      description: Endpoint per inviare notifiche digitali a valore legale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalNotificationRequest'
      responses:
        '200':
          description: Richiesta elaborata con successo.
        '400':
          description: Richiesta non valida.
        '500':
          description: Errore interno del server.

components:
  schemas:

    #############################################################################################
    ###                     RICHIESTE DI INVIO DI MESSAGGISTICA DIGITALE                      ###
    #############################################################################################
    BaseDigitalMessageRequest:
      title: Schema base per i messaggi digitali
      required:
        - requestId
        - eventType
        - qos
        - clientRequestTimeStamp
        - channel
        - receiverDigitalAddress
        - messageText
      type: object
      properties:
        requestId:
          type: string
          description: >-
            Identificativo della richiesta.
        correlationId:
          type: string
          description: >-
            Id di correlazione, permette al sender di correlare eventualmente la response. Se assente viene inizializzato con il requestId
        eventType:
          type: string
          description: >-
            Tipologia di richiesta. Permette di identificare il tipo di informazione che viene richiesto.
            Permette di clusterizzare le tipologie di comunicazione in ingresso
            (se sender diversi usano EventType diversi, a fini ad es di fatturazione diventa semplice individuare gli oggetti).
        qos:
          type: string
          enum:
            - INTERACTIVE
            - BATCH
          description: >-
            Interactive/Batch (quality of service, "entro quanto tempo" devo rispondere, con che livello di servizio)
        # TODO: visto che da problemi con openapi generator 5.4.0, essendo opzionale, per ora lo commentiamo
        #       provare a decommentarlo al passaggio a openapi generator 6.0.0
        #tags:
        #  type: object
        #  properties:
        #    iun:
        #      type: string
        #      description: >-
        #        Identificativo Unico della Notifica.
        #        Non è obbligatorio (ad es in una richiesta di verifica indirizzi non abbiamo un identificativo di notifica).
        #  additionalProperties: true
        clientRequestTimeStamp:
          type: string
          format: date-time
          description: >-
            Timestamp della richiesta in UTC
        receiverDigitalAddress:
          type: string
          description: >-
            Indirizzo PEC del destinatario (o in genere recapito digitale certificato a valore legale).
            L’indirizzo si assume valido ed attivo: i servizi erogatori non eseguono ulteriori validazioni sullo stesso.
            Non sono previste mail con più destinatari.
            In caso di comunicazioni a più destinatari saranno richieste più comunicazioni (in questo modo avremo un requestId univoco per ogni comunicazione/evento/pec).
        messageText:
          type: string
          description: >-
            Testo del corpo della comunicazione digitale.
            Può essere a discrezione del chiamante in plain text od html (un campo ad hoc che discrimini il formato è opportuno?).
        senderDigitalAddress:
          type: string
          description: >-
            Indirizzo PEC (o analoga comunicazione digitale a valore legale) del mittente della comunicazione.
            Se non passato va recuperato da configurazione sulla base del sistema chiamante (i.e. X-PagoPA-EXTCH-CX),
            va censito in configurazione (obbligatorio).



 ### - PEC, REM, SERCQ, ....
    ###########################################
    DigitalNotificationRequest:
      title: schema per notifiche a valore legale, con allegati
      allOf:
        - $ref: '#/components/schemas/BaseDigitalMessageRequest'
        - type: object
          required:
            - channel
            - subjectText
            - messageContentType
          properties:
            channel:
              type: string
              enum:
                - PEC
                - REM
              description: >-
                Canale di recapito con cui il Sender chiede l’erogazione del servizio. In un primo momento sarà PEC,
                ma il dominio dovrà prevedere a breve SERQ, PEC_REM, ed in futuro ogni forma di recapito digitale a valore legale.
            subjectText:
              type: string
              description: >-
                Oggetto del corpo della comunicazione digitale.
            messageContentType:
              type: string
              enum:
                - 'text/plain'
                - 'text/html'
              description: >-
                Formato: HTML o PLAIN
            attachmentUrls:
              type: array
              items:
                type: string
                description: >-
                  Path in cui si trova il documento da allegare alla comunicazione digitale
                  (i.e. url del file dentro Safe Storage che si occuperà di crypt/decrypt dei documenti).
                  Il Safe Storge si occuperà di calcolare la presigned url per il recupero dell'allegato che sarà decifrato.
                  documentUrl può rispondere (alla GET) con un 403 per redirect vs servizio (i.e. lambda, safe storage, presigned url vs bucket s3 non cifrato).
